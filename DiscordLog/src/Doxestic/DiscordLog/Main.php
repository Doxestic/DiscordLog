<?php

declare(strict_types=1);

namespace Doxestic\DiscordLog;

use pocketmine\event\entity\EntityTeleportEvent;
use pocketmine\event\inventory\InventoryTransactionEvent;
use pocketmine\event\Listener;
use pocketmine\event\player\PlayerChatEvent;
use pocketmine\event\player\PlayerDeathEvent;
use pocketmine\event\player\PlayerDropItemEvent;
use pocketmine\event\player\PlayerJoinEvent;
use pocketmine\event\player\PlayerQuitEvent;
use pocketmine\event\server\CommandEvent;
use pocketmine\plugin\PluginBase;
use pocketmine\Player;
use pocketmine\utils\Config;

class Main extends PluginBase implements Listener {

    public $url = "";

    public $logs = "server Enabled";
    public $curl;

    public $data;

    public function onEnable()
    {
        $this->getServer()->getPluginManager()->registerEvents($this, $this);
        $this->saveResource("Config.yml");
        $d = new Config($this->getDataFolder() . "Config.yml");
        $this->data = $d->getAll();
        $this->url = $this->data["url"];
        $this->getScheduler()->scheduleRepeatingTask(new sendTask($this), 20 * 60 * (int) $this->data["delay"]);
        parent::onEnable(); // TODO: Change the autogenerated stub
    }


    public function onJoin(PlayerJoinEvent $event){
        if (!$this->data["events"]["join"] == true){
            return;
        }
        $this->logs = "[" . date("h:i:s") . "] " . "{$event->getPlayer()->getName()} Joined Server\n";
    }

    public function onQuit(PlayerQuitEvent $event){
        if (!$this->data["events"]["left"] == true){
            return;
        }
        $this->logs .= "[" . date("h:i:s") . "] " . "{$event->getPlayer()->getName()} Lefted Server\n";
    }

    public function onCmd(CommandEvent $event){
        if (!$this->data["events"]["cmd"] == true){
            return;
        }
        $s = $event->getSender();
        if ($s instanceof Player){
            $this->logs .= "[" . date("h:i:s") . "] " . "[{$s->getName()} CMD] : /{$event->getCommand()}\n";
        }
    }

    public function onChat(PlayerChatEvent $event){
        if (!$this->data["events"]["chat"] == true){
            return;
        }
        $pl = $event->getPlayer();
        $this->logs .= "[" . date("h:i:s") . "] " . "[{$pl->getName()} CHAT] : {$event->getMessage()}\n";
    }

    public function onDeath(PlayerDeathEvent $event){
        if (!$this->data["events"]["death"] == true){
            return;
        }
        $pl = $event->getPlayer();
        $this->logs .= "[" . date("h:i:s") . "] " . "[{$pl->getName()} DEATH] : {$event->getDeathMessage()}\n";
    }

    public function onTp(EntityTeleportEvent $event){
        if (!$this->data["events"]["teleport"] == true){
            return;
        }
        $pl = $event->getEntity();
        if ($pl instanceof Player){
            if ($event->getTo()->getLevel()->getName() != $event->getFrom()->getLevelNonNull()->getName()){
                $this->logs .= "[" . date("h:i:s") . "] " . "[{$pl->getName()} TELEPORT] : {$event->getFrom()->getLevelNonNull()->getName()} {$event->getFrom()->getX()} - {$event->getFrom()->getY()} - {$event->getFrom()->getZ()} TO {$event->getTo()->getLevelNonNull()->getName()} {$event->getTo()->getX()} - {$event->getTo()->getY()} - {$event->getTo()->getZ()}\n";
            }
        }
    }

    public function onDrop(PlayerDropItemEvent $event){
        if (!$this->data["events"]["drop"] == true){
            return;
        }
        $pl = $event->getPlayer();
        $it = $event->getItem()->getName();
        $this->logs .= "[" . date("h:i:s") . "] " . "[{$pl->getName()} DROP] : Droped $it\n";
    }
}
